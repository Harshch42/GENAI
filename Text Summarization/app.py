# Import necessary libraries and modules
import os
import json
import requests
from dotenv import load_dotenv, find_dotenv
import gradio as gr  # Gradio is used for creating user-friendly web interfaces for machine learning applications.

# Load environment variables (API Key and URL)
_ = load_dotenv(find_dotenv())  # This line locates and loads environment variables from a .env file, ensuring sensitive information is not hard-coded.
api_key = os.environ['API_KEY']  # Retrieves the API key from the environment variables, which is essential for authenticating requests to the model API.
ENDPOINT_URL = os.environ['URL']  # Retrieves the URL for the DistilBART model's API endpoint, allowing for secure access.

# Helper function to interact with the DistilBART model API
def get_completion(inputs, parameters=None):
    """
    Sends a POST request to the DistilBART model endpoint and retrieves the generated summary.

    Args:
    - inputs (str): The input text that needs to be summarized by the DistilBART model.
    - parameters (dict, optional): Additional parameters that can customize the summarization output (e.g., max length, temperature).

    Returns:
    - dict: The JSON-decoded output from the model, which includes the generated summary.
    """
    headers = {
        "Authorization": f"Bearer {api_key}",  # Sets up the authorization header using the API key for secure access to the model.
        "Content-Type": "application/json"  # Specifies that the request body is in JSON format.
    }
    data = {"inputs": inputs}  # Prepares the input data as a dictionary containing the text to summarize.
    if parameters is not None:
        data.update({"parameters": parameters})  # If additional parameters are provided, they are included in the request data.

    # Make a POST request to the model's endpoint and decode the response
    response = requests.post(ENDPOINT_URL, headers=headers, data=json.dumps(data))  # Sends the POST request and converts the response content from bytes to a string format.
    return json.loads(response.content.decode("utf-8"))  # Decodes the JSON response into a Python dictionary for easier handling.

# Token Merging Function (Useful for Named Entity Recognition or other token-based tasks)
def merge_tokens(tokens):
    """
    Merges subword tokens generated by the DistilBART model into meaningful words or phrases.

    Args:
    - tokens (list): A list of token dictionaries containing attributes like 'entity', 'word', etc.

    Returns:
    - list: A list of merged tokens that form complete entities, useful for applications like NER.
    """
    merged_tokens = []  # Initialize an empty list to store the merged tokens.
    for token in tokens:
        # Check if the current token is a continuation of the previous token and belongs to the same entity
        if merged_tokens and token['entity'].startswith('I-') and merged_tokens[-1]['entity'].endswith(token['entity'][2:]):
            last_token = merged_tokens[-1]  # Reference to the last token in the merged list.
            last_token['word'] += token['word'].replace('##', '')  # Concatenate the current token's word to the last token's word, removing subword indicators.
            last_token['end'] = token['end']  # Update the end position of the last token.
            last_token['score'] = (last_token['score'] + token['score']) / 2  # Average the confidence scores of the merged tokens.
        else:
            merged_tokens.append(token)  # If not a continuation, append the current token as a new entry.
    return merged_tokens  # Return the list of merged tokens.

# Task: Text Summarization using DistilBART
def summarize(input_text):
    """
    Uses the DistilBART model API to generate a summary for the provided input text.

    Args:
    - input_text (str): The input text that needs to be summarized using the DistilBART model.

    Returns:
    - str: The summarized output text generated by the model.
    """
    output = get_completion(input_text)  # Calls the API function to get the model's output based on the input text.
    return output[0]['summary_text']  # Extracts the summary from the API response, returning the summarized text.

# Gradio Interface for Text Summarization with Enhanced Design
demo = gr.Interface(
    fn=summarize,  # The function that gets called when the user submits input.
    inputs=gr.Textbox(lines=5, label="Enter Text to Summarize"),  # Creates a text input box for users to enter the text they want summarized.
    outputs=gr.Textbox(label="Summary Output"),  # Creates an output box to display the summarized text.
    title="Text Summarization with DistilBART",  # The title of the web app.
    description="Paste your text below to get a concise summary using the DistilBART model.",  # A brief description of the app's functionality.
    live=True  # Enables real-time processing so users can see results as they type.
)

# Launch the Gradio interface (accessible to the public with 'share=True')
demo.launch(share=True, server_port=7860)  # Starts the Gradio app, making it accessible to others over the internet and running on port 7860.
